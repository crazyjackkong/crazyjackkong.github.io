<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[git 笔记]]></title>
    <url>%2Fpost%2F17766adb.html</url>
    <content type="text"><![CDATA[参照以下链接进行的学习：https://learngitbranching.js.org/?NODEMO=&amp;locale=zh_CN 1.将分支强制移动到某个提交git branch -f &lt;分支名称&gt; &lt;提交&gt; 2.合并分支一般有两种方法：rebase、merge一般用rebaserebase &lt;前面的分支&gt; &lt;后面的分支&gt;而且rebase -i HEAD~4可以进行交互式操作之前的相应数量的提交 3.撤销变更一是 git reset，还有就是 git revertreset 相当于将HEAD和分支都回退指向前面的记录，看不见后面的记录为了撤销更改并分享给别人，我们需要使用 git revert，相当于一次新的提交，用于抵消 4.cherry-pick 移动指定提交git cherry-pick &lt;提交1&gt; &lt;提交2&gt;将提交移动到当前的HEAD之后 5.tag 和 describe就像是提交树上的一个锚点，标识了某个特定的位置。git describe 的​​语法是：git describe &lt;分支&gt; 可以是任何能被 Git 识别成提交记录的引用，如果你没有指定的话，Git 会以你目前所检出的位置（HEAD）。它输出的结果是这样的： __gtag 表示的是离 ref 最近的标签， numCommits 是表示这个 分支与 tag 相差有多少个提交记录 hash 表示的是你所给定的 ref 所表示的提交记录哈希值的前几位。当 ref 提交记录上有某个标签时，则只输出标签名称 6.fetchgit fetch 完成了仅有的但是很重要的两步: 从远程仓库下载本地仓库中缺失的提交记录 更新远程分支指针(如 o/main)git fetch 并不会改变你本地仓库的状态。它不会更新你的 main 分支，也不会修改你磁盘上的文件。 7.pullgit pull 就是 git fetch 和 git merge 的缩写！同时完成了下载和合并本地分支的作用git pull –rebase 就是 fetch 和 rebase 的简写！ 8.远程分支和本地分支的绑定跟踪远程main分支第一种就是通过远程分支检出一个新的分支，执行:git checkout -b totallyNotMain o/main就可以创建一个名为 totallyNotMain 的分支，它跟踪远程分支 o/main。git branch -u o/main foo这样 foo 就会跟踪 o/main 了。如果当前就在 foo 分支上, 还可以省略 foo：git branch -u o/main 9.加了参数的pushpush(fetch pull 类似可以指定参数)git push git push origin main把这个命令翻译过来就是：切到本地仓库中的“main”分支，获取所有的提交，再到远程仓库“origin”中找到“main”分支，将远程仓库中没有的提交记录都添加上去，搞定之后告诉我。git push origin :这个相对于上面是可以使得本地的分支A可以push到远程的分支B，比之前的更灵活]]></content>
      <categories>
        <category>学习</category>
      </categories>
      <tags>
        <tag>笔记</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Yolo_v1代码分析]]></title>
    <url>%2Fpost%2F1a124b91.html</url>
    <content type="text"><![CDATA[Yolo_v1代码分析 参考：https://github.com/TowardsNorth/yolo_v1_tensorflow_guiyu项目地址：https://github.com/crazyjackkong/yolo_v1_tensorflow pascal_voc.py主要研究 load_pascal_annotation(self, index)函数： 其返回值为：return label, len(objs) #返回label，以及该index文件中object的数量 label数组的定义： 1234# label数组维度 7*7*25， 一个cell只负责预测一个类别# 7*7为网格的个数，25的0为标志位，用于是否检测到object# 1-4为box的坐标信息，5-24位为是否存在20个相应类别的标志label = np.zeros((self.cell_size, self.cell_size, 25)) 其中的位置信息根据xml文件得知，并且转换为448下的尺寸信息 yolo_net.py定义了Yolo_v1网络的结构： 网络结构，计算IOU，Loss函数，激活函数(leaky_relu) 网络结构 build_network用slim构建网络 计算IOU calc_iou是一个计算两个bbox之间的IOU的函数 Loss函数 loss_layer 这句话表明了在第i个cell 中的第j个bounding_box是否有物体的表示方式。 增加了边界框坐标预测的损失，减少了不包含对象的边界框坐标预测的损失。我们使用了两个参数，在代码中的定义为noobject_scale coord_scale 网络的输出信息提取主要提取了： predict_classes 预测每个格子目标的类别： 形状[batch_size,7,7,20] predict_scales 预测每个格子中两个边界框的置信度 形状[batch_size,7,7,2] predict_boxes 预测每个格子中的两个边界框, (x,y)表示边界框相对于格子边界框的中心 w,h的开根号相对于整个图片 形状[batch_size,7,7,2,4] label 中的信息提取主要提取了： response 标签的置信度,表示这个地方是否有框 形状[batch_size,7,7,1] boxes 标签的边界框 (x,y)表示边界框相对于整个图片的中心,通过除以image_size归一化， 形状[batch_size,7,7,1,4]，张量沿着axis=3重复两边，扩充后[batch_size,7,7,2,4] classes 分类信息 （7*7*20） 获取需要的 predict_boxes_tran接下的代码用于获取predict_boxes_tran的信息，即网络输出的预测框的信息，它是由网络的输出信息提取出来的网络的输出predict_boxes变换而来，其形式需要和label 中的boxes信息格式一致，即： 相对于格子边界框的中心 -&gt;&gt; 相对于整个图片的中心,通过除以image_size归一化 宽和高是相对于图片归一化后的大小的开方 -&gt;&gt; 不开方 具体分析如下： predict_boxes的输出是网络前向传播后预测的候选框，predict_boxes中的前两位，是predict_boxes中心坐标离所属格子（response）左上角的坐标。而predict_boxes中的后两位，是predict_boxes的宽度高度相对于图片归一化后的大小的开方。 这就需要将predict_boxes的中心坐标转换为相对于整张图来说的（x，y）中心坐标。这里引入了offset_tran，其构造过程由self.offset逐步产生。 12(predict_boxes[..., 0] + offset) / self.cell_size,(predict_boxes[..., 1] + offset_tran) / self.cell_size, 就是先将上面图中的x和y变成（x+offset x，y+offset y），然后除以cell_size=7,相当于对中心坐标进行了归一化，12tf.square(predict_boxes[..., 2]), tf.square(predict_boxes[..., 3])], 就是将原来的宽度（归一化）的开方和高度（归一化）的开方恢复成：（宽度（归一化），高度（归一化）），那么predict_bbox中的坐标信息，全部通过这段代码，恢复成了和labels中坐标相同格式的了 offset_tran 的产生其构造过程由self.offset逐步产生，self.offset的定义：123456789# 3.reshape之后再转置，变成7*7*2的三维数组self.offset = np.transpose( # 2.创建完成后reshape为2*7*7的三维数组 np.reshape( # 1.创建 14*7的二维数组 np.array([np.arange(self.cell_size)] * self.cell_size * self.boxes_per_cell), (self.boxes_per_cell, self.cell_size, self.cell_size)), (1, 2, 0)) 然后offset变量为self.offset增加第0维度:batch_size后所得 ：先reshape，由[7*7*2]变为[1*7*7*2]再tile复制成[batch_size*7*7*2]最后的offset_tran的定义为1offset_tran = tf.transpose(offset, (0, 2, 1, 3)) 忽略axis=0,其值为下图b： 计算每个格子预测边界框与真实边界框之间的IOU1iou_predict_truth = self.calc_iou(predict_boxes_tran, boxes) 求论文中的1ijobj参数 object_mask noobject_mask 1ijobj：表示网格单元i的第j个编辑框预测器’负责‘该预测 ，[batch_size,7,7,2]当格子中的确有目标时，取值为[1,0],[0,1]比如某一个格子的值为[1,0]，表示第一个边界框负责该格子目标的预测 [0,1]：表示第二个边界框负责该格子目标的预测当格子没有目标时，取值为[0,0] 即满足两个以下条件的对象 （1） 该对象属于的框是response框，负责检测物体 （2） 该对象是所属框中的，与实际物体IOU比例较大的那个 相应的位置为1，其余为0即可求得 1ijobj noobject_mask就表示每个边界框不负责该目标的置信度 boxes_tran 将标签中的boxes参数调整为方便loss计算形式 中心的(x,y)由相对整个图像-&gt;相对当前格子 长和宽开方 计算各部分loss1. class_loss 计算类别的损失,如果目标出现在网格中 response为1，否则response为0 原文代价函数公式第5项.该项表明当格子中有目标时，预测的类别越接近实际类别，代价值越小。 2. object_loss 有目标物体存在的置信度预测损失 原文代价函数公式第3项，该项表明当格子中有目标时，负责该目标预测的边界框的置信度越越接近预测的边界框与实际边界框之间的IOU时，代价值越小，有目标的时候，置信度损失函数 3. noobject_loss 没有目标物体存在的置信度的损失(此时iou_predict_truth为0) 原文代价函数公式第4项该项表名当格子中没有目标时，预测的两个边界框的置信度越接近0，代价值越小，没有目标的时候，置信度的损失函数 4. coord_loss边界框坐标损失 shape 为 [batch_size, 7, 7, 2, 1] 原文代价函数公式1,2项 该项表明当格子中有目标时，预测的边界框越接近实际边界框，代价值越小，只计算有目标的cell中iou最大的那个框的损失，即用这个iou最大的框来负责预测这个框，其它不管，乘以0 激活函数 leaky_relu 1234def leaky_relu(alpha): #leaky_relu激活函数 def op(inputs): return tf.nn.leaky_relu(inputs, alpha=alpha, name='leaky_relu') return op 参考 https://www.cnblogs.com/sddai/p/10288074.html https://zhuanlan.zhihu.com/p/89143061]]></content>
      <categories>
        <category>算法</category>
        <category>笔记</category>
      </categories>
      <tags>
        <tag>实验</tag>
        <tag>DL</tag>
        <tag>笔记</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Yolo_v1实验]]></title>
    <url>%2Fpost%2Faa9b2620.html</url>
    <content type="text"><![CDATA[Yolo_v1 本地运行实验TensorFlow Yolo_v1 原理学习参考 https://zhuanlan.zhihu.com/p/46691043 进行 Yolo_v1 实验参考：https://github.com/TowardsNorth/yolo_v1_tensorflow_guiyu 环境及数据集准备TensorFlow 2.x环境数据集 VOCtrainval_06-Nov-2007.tar：https://hyper.ai/datasets/7660权重文件 YOLO_small：链接：https://pan.baidu.com/s/1tMeCBj2OItaIBJbotNFUDA 提取码：k6tp 解压数据集和权重文件，存放位置如下所示 Modify configuration in yolo/config.py采用默认，不修改 编译运行问题：‘module ‘tensorflow’ has no attribute ‘contrib’原因：这是由于TensorFlow2.x去掉了contrib模块解决：https://github.com/tensorflow/models/issues/8020 安装tf_slim模块 pip install git+https://github.com/adrianc-a/tf-slim.git@remove_contrib 问题：依然出现部分库在2.0中不存在解决：使用兼容接口eg：tf.placeholder，替换为tf.compat.v1.placeholder 问题：from utils.timer import Timer 报错原因：在文件目录有utils但是默认调用了site-package里的utils解决：改变自己库的命名 运行结果 参考https://zhuanlan.zhihu.com/p/46691043]]></content>
      <categories>
        <category>算法</category>
        <category>笔记</category>
      </categories>
      <tags>
        <tag>实验</tag>
        <tag>DL</tag>
        <tag>笔记</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[监督学习和无监督学习]]></title>
    <url>%2Fpost%2F62c7e70.html</url>
    <content type="text"><![CDATA[是否有监督（supervised），就看输入数据是否有标签（label）。输入数据有标签，则为有监督学习，没标签则为无监督学习这里我参考网络资料将机器学习分为；有监督学习、无监督学习、半监督学习和强化学习四类。 有监督学习 分类（classification）：输入的训练数据有特征（feature），有标签（label）。所谓的学习，其本质就是找到特征和标签间的关系（mapping）。从而给定新的特征，得出器相应的分类结果即标签。 回归（regression）：其数据集是给定一个函数和它的一些坐标点，然后通过回归分析的算法，来估计原函数的模型，求出一个最符合这些已知数据集的函数，从而预测未知输入的输出值。 分类和回归的主要区别就是输出结果是离散的还是连续的。 无监督学习聚类：把相似的东西聚在一起，并不需要知道类别是什么训练数据是无标签的，训练目标是能对数据进行区分和界定 半监督学习是监督学习与无监督学习相结合的一种学习方法。半监督学习使用大量的未标记数据，以及同时使用标记数据，来进行模式识别工作。 它主要考虑如何利用少量的标注样本和大量的未标注样本进行训练和分类的问题。主要分为半监督分类，半监督回归，半监督聚类和半监督降维算法。 强化学习（reinforcement learning）摘自：https://easyai.tech/ai-definition/reinforcement-learning/强化学习算法的思路非常简单，以游戏为例，如果在游戏中采取某种策略可以取得较高的得分，那么就进一步「强化」这种策略，以期继续取得较好的结果。这种策略与日常生活中的各种「绩效奖励」非常类似。我们平时也常常用这样的策略来提高自己的游戏水平。 在 Flappy bird 这个游戏中，我们需要简单的点击操作来控制小鸟，躲过各种水管，飞的越远越好，因为飞的越远就能获得更高的积分奖励。 这就是一个典型的强化学习场景： 机器有一个明确的小鸟角色——代理 需要控制小鸟飞的更远——目标 整个游戏过程中需要躲避各种水管——环境 躲避水管的方法是让小鸟用力飞一下——行动 飞的越远，就会获得越多的积分——奖励 强化学习和监督学习、无监督学习 最大的不同就是不需要大量的“数据喂养”。而是通过自己不停的尝试来学会某些技能。 参考 https://www.zhihu.com/question/23194489 https://easyai.tech/ai-definition/如reinforcement-learning]]></content>
      <categories>
        <category>算法</category>
        <category>笔记</category>
      </categories>
      <tags>
        <tag>DL</tag>
        <tag>笔记</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[计算机3级考试嵌入式系统开发技术知识点总结（转载）]]></title>
    <url>%2Fpost%2F156f943e.html</url>
    <content type="text"><![CDATA[转自嵌入式ARM;) 1月23日 仅供个人查阅 嵌入式系统嵌入式系统上的软件具有结构精简，代码轻量化，占用存储资源少的特点。 嵌入式系统和计算机操作系统的共同特征是：引导加载程序、外设驱动程序、操作系统、文件系统、网络协议栈、图形用户界面、数据库。嵌入式系统应用开发工具的主要目的：提高开发质量，缩短开发周期，降低开发成本。按照软硬件技术的复杂程度进行分类，可以把嵌入式系统分为：高端系统、终端系统和低端系统三大类。 仿真平台指嵌入式系统开发中使用的虚拟机管理软件、仿真软件或者指令集模式器 对应内存容量而言1KB = 1024B，对应外存（磁盘、U盘）等容量而言，1KB=1000B OS装载方式：串口、以太网和USB装载。 嵌入式应用程序经过交叉工具链生成映像文件后，需要下载到目标机进行调试。 调试完毕后映像文件必须有专用工具烧写到ROM中去，这种烧写工具俗称编程器！文本根据排版格式可分为：纯文本和丰富文本。windows环境下，txt就是纯文本。相对于线性文本，超文本按着网状结构组织信息。WWW网页是最为常见超文本。 当前速度最快的CPU已经超过10GHz。 嵌套向量中断控制器缩写为NVIC GCC是GNU套件的编译链接器，能编译C语言，汇编语言。 GDB调试下，file命令是装入需要调试的可执行文件，run命令执行当前被调试的程序。 源文件到可执行文件的步骤：预处理-&gt;编译-&gt;汇编-&gt;连接。前向通道和后向通道前向通道 - 输入接口，A/D后向通道 - 输出接口，D/A AX88796芯片内部寄存器的地址范围：0x10000000 ~ 0x100003FF嵌入式系统硬件的逻辑组成硬件主体中央处理器和存储器，他们通过IO接口或者IO设备与外部世界联系，并借助总线相互连接 中央处理器主要由运算器、控制器、寄存器和高速缓冲区（cache）组成嵌入式系统的特点 专用型 隐蔽型 资源受限 高可靠性 软件固化 实时性 嵌入式系统的CPU特点 实时处理 低功耗 结构特拓展性 集成了测试电路 4、8、16、32位字长 CPU嵌入式系统的CPU主要使用的有DSP、RAM以及FPGA。 DSP介绍 适用于数字信号处理的微处理器（DSP并非高性能通用处理器，它是一种专用于数字信号处理的微处理器） 支持单指令多数据（SIMD）并行处理的指令 显著提高音频、视频等数字信号的数据处理效率 手机和数码产品均有DSP 嵌入式开发流程需求分析和规格说明 -&gt; 系统设计 -&gt; 构件设计 -&gt; 系统集成与测试 测试的目的是验证模块/系统的功能和性能，以及时发现错误 基于嵌入式WEB的应用系统中，构件设计阶段需要设计支持以太网通信的电路，包括以太网控制电路和以太网驱动电路。AX8879芯片内部寄存器的读/写地址，其首地址一般是0x1000 0000 嵌入式开发特点 宿主机 - 目标机的开发架构 与底层硬件控制程序的关系密切 软硬件资源受限制 需要固化程序 嵌入式系统开发调试工具 在线仿真器 JTAG适配器 示波器 GPIO GPIO引脚一般是多功能复用的，具有0态，1态和高阻态。 作为输入接口时一般具有缓冲功能，作为输出接口时一般具有锁存功能。 GPIO可以实现并行IO，SPI、UART、I2C都是串行。UART UART由发生器、接收器、控制单元以及波特率发生器等组成。 可实现全双工通信! RAM芯片中的UART收发信息时，可以采用FIFO，也可以采用普通模式 一般接收和发送缓冲区的FIFO字节数一样的，长度可编程选择4B、8B、16B、64B。 UART传送消息的格式是以起始位开始以停止位结束 UART传送信息时，一次可传输的数据位可以是5，6，7，8位，由编程决定 基于UART可组成RS-232接口 RS232 - 最远15m RS485 - 最远1.2kRAM实现485总线的功能，需要采用S3C2410芯片内部的UART部件外加转换芯片等来实现。在软件设计时，初始化波特率9600bps，数据格式格式为：8位数据位，无数据检验位，1位停止位。那么1s时间内最多传输960个字节。（**注意计算还得加上起始位和停止位） CAN** 即： 控制器局域网 能够实现多主通信 CAN总线的数据帧由7个不同的域组成，其中域的长度可以是0~8位 采用CRC校验 RAM芯片内部嵌入CAN控制器 键盘8个GPIO脚最多构成64个按键的键盘矩阵键盘通常有行扫描法和反转法读取按键的特征值（还有一种方法叫做中断方式）嵌入式处理器内核的分类按照字长可以分为：8/16/32/64 位结构 按照存储可以分为：冯诺依曼和哈佛(程序和数据分开存储)结构 按照指令集可以分为：CISC、 RISC结构 CISC(complex instruction set computer 复杂指令集) RISC(reduced instruction set computer 精简指令集)SOC片上系统SOC已成为嵌入式处理器芯片的主流发展趋势 它是集成电路进入深亚微米时代的产物 既能把数字电路也能把模拟电路集成到单个芯片上 包含数字电路、模拟电路以及射频电路 单个芯片即可完成采集、转换、存储、处理和I/O等多种功能 SOC有通用SOC芯片和专用SOC芯片之分 专用SOC芯片按其工艺分为定制芯片和现场可编程芯片两类集成电路集成电路有小规模(SSI)、中规模(MSI)、大规模(LSI)、超大规模(VLSI)和极大规模(ULSI)组成，嵌入式处理芯片一般属于VLSI和USLI。 集成电路大多是在硅衬底上制作，硅衬底是单晶硅锭经切割，研磨和抛光而成的圆形薄片。 集成电路中的电路及电子元件，需要反复交叉氧化、光刻、掺杂和互连等工序才能制成。嵌入式最小系统组成嵌入式系统一般包括嵌入式处理器、时钟电路、电源电路、复位电路、存储器和调试测试接口。JTAG调试技术JTAG标准中规定的TAP接口具有5根信号线构建一个宿主机 - 目标机的开发环境，若目标机是裸机，那么为了调试和下载软件需要将调试仿真器连接到目标机的JTAG接口！ JATG是一种嵌入式测试技术，大多数嵌入式CPU、DSP、FPGA器件都支持JTAG JTAG允许多个芯片的边界扫描寄存器BSR通过JTAG接口串联在一起，实现对多个器件的测试 通过JTAG可以实现在线编程功能主频时钟0.01s基准定时时间选用S3C2410芯片内部的Timer0部件产生。若系统的主频参数PCLK=264MHz，分频器选择16，预分频系数选择为3，那么，Timer0的计数常数为：41250 计算方法：定时器输入时钟频率 = PCLK/(预分频系数+1)/（分割器值），计数常数 = 定时间间隔/（1/定时器输入时钟频率） 带宽 = 总线频率 × 数据线宽度 / 8 × 次数 / 周期板级升级包（BSP）引导加载程序、初始化程序、设备驱动程序、配置文件 含有电路板的初始化程序 所有与特定电路板上硬件相关的功能都集成在板级支持包的库里 操作系统的上层代码通过板级支持包访问底层硬件ARM单指令周期和流水线技术是RAM处理器的技术特征。 RAM都是RISC，但是存储结构有的是哈佛结构，有的是冯诺依曼结构。 PowerPC、MC68K、MIPS都是RISC，哈佛结构！ Cortex 系列分为A-R-M ，A系列是面向尖端虚拟内存的操作系统和用户应用，R系列是针对实时系统，M系列是对微控制器。 Cortex - M3系列是哈佛结构。 RAM内部一般有：UART/I2C/SPI/CAN/USB/Ethernet等多个互连通信组件 RAM处理器共37个，包括31个通用寄存器（含PC）和6个状态寄存器 RAM异常 将CPRS的值保存到将要执行的异常中断对应的SPSR中 设置CPSR的相应位 断点地址保存到R14 PC赋值，转入向量地址ADS按照存储区域类型划分为3类，RO段，RW段，ZI段，RO段是指代码存储区和常数存储区，具有只读属性 可执行输出文件有3个生成目标：Debug、Release、DEbugRel 工程项目按照一定的逻辑来分组管理文件： 文件映射关系较简单时：使用编译、链接选项来确定输入文件的连接关系 地址映射关系较复杂时：使用scatter（分散加载）格式的文件来确定输入文件的连接关系RVDSRVDS开发工具套件中，主要包括工程管理器、编译连接器、调试器和指令集仿真器。调试器支持硬件在线调试和软件仿真调试。电源管理模块 正常模式 慢速模式 休眠模式 - 仅断开RAM内核时钟FCLK，CPU处于休眠模式，仍为外围硬件组件提供时钟。 掉电模式 - 切断内部电源，除非唤醒逻辑有效，否则内核不产生功耗 正常模式下，电源管理模式为内核及RAM芯片内部所有硬件组成提供时钟源，用户可以通过软件控制暂时不用的内置硬件组件处于关闭状态降低功耗。硬件抽象层HAL向操作系统内核提供了访问硬件底层的函数接口 嵌入式软件中直接访问底层硬件的例程集合 增加的HAL位于硬件电路板和操作系统内核之间 嵌入式电路板的最基本软件 HAL函数是移植操作系统的基础 HAL隐藏了不同硬件平台的差异性，从而改善了操作系统的可移植性！AMBA总线RAM的总线结构成为 AMBA -先进微控制器总线结构（一种开放式总线结构） 从1995的AMBA1.0到目前的AMBA4.0共四个版本！ RAM7 - AMBA1; RAM11 - AMBA2 按照AMBA总线规范，基于RAM内核的嵌入式处理芯片采用系统总线和外围总线两层结构的方式构建片上系统 连接系统总线的高带宽组件（AHB接口）主要包括：电源管理和时钟控制器，测试接口（JTAG），外部存储器控制接口，DMA控制器，USB主机，中断控制器。（可以看出大多数为控制器） RTC是与外围总线（APB接口）连接的硬件组件 MMUMMU，内存管理单元，它是用来管理虚拟存储器、物理存储器的控制线路，同时也负责虚拟地址映射为物理地址，以及提供硬件机制的内存访问授权。 虚拟地址到物理地址的转换通过查找页表来完成，每次在访问内存时先插TLB，查不到再到内存中查整个页表。ARM7 ≠ ARMv7RAM7 - 冯诺依曼的结构。 RAM9~RAM11 采用哈佛结构！ARMv7是一种构架。ARM7是一种处理器型号，ARM7（冯诺依曼结构）是在ARMv4构架上设计出来的处理器。RAM11（ARMv6架构）之后便是以Cortex（ARMv7架构）来命名了！ARM7没有MMU(内存管理单元)，只能叫做MCU（微控制器），不能运行诸如Linux、WinCE（大型嵌入式操作系统）等这些现代的多用户多进程操作系统，因为运行这些系统需要MMU，才能给每个用户进程分配进程自己独立的地址空间。ucOS、ucLinux这些精简实时的RTOS不需要MMU，当然可以在ARM7上运行。 ARM9、ARM11，是嵌入式CPU（处理器），带有MMU，可以运行诸如Linux等多用户多进程的操作系统，应用场合也不同于ARM7。 此外，Cortex-M系列还细分为M0、M3、M4和超低功耗的M0+，用户依据成本、性能、功耗等因素来选择芯片。 Cortex-M系列（ARMv7架构）的指令集只有Thumb-2。 ARM处理器 ≠ ARM处理器核 处理器核：在某种架构的基础上具有取指令和执行指令的组件。 处理器： 以处理器核为中心，加上MMU，中断控制器，浮点运算器，总线接口等就构成了RAM处理器。 当然了，单独的处理器核也可以作为某一代RAM处理器的。 RAM常考寄存器 R13 - SP （堆栈指针） R14 - LR（链接寄存器） R15 - PC（程序计数器） xPSR - （CPSR 和 SPSR）状态寄存器 SP寄存器 SP有两个，分别为R13(MSP)和R13(PSP)即主堆栈指针（MSP）和进程堆栈指针（PSP），但在同一时刻只能有一个可以看到，这也就是所谓的“banked”寄存器。 这些寄存器都是32位的。CPSR寄存器CPSR(当前程序状态寄存器)在任何处理器模式下被访问。它包含了条件标志位、中断禁止位、当前处理器模式标志以及其他的一些控制和状态位。 RAM中表示程序状态的寄存器是CPSR，其中状态位T的作用是在RAM状态与Thumb状态间进行切换，当T = 1时处理器处于的状态是Thumb状态。 N为符号标志位 - N=1表示运算结果为负，否则运算结果为正 F为禁止快读中断为 - F=1表示禁止快速中断控制位，否则允许！ V为溢出标志位，等于1表示溢出 Z为全0标志，运算结果为0 SPSR寄存器每一种处理器模式下（看下面的其中运行模式）都有一个专用的物理状态寄存器，称为SPSR（备份程序状态寄存器）。 当特定的异常中断发生时，这个寄存器用于存放当前程序状态寄存器的内容。在异常中断退出时，可以用SPSR来恢复CPSR。 由于用户模式和系统模式不是异常中断模式，所以他没有SPSR。当用户在用户模式或系统模式访问SPSR，将产生不可预知的后果。控制寄存器和数据寄存器控制寄存器是4个字节，比如端口E的控制寄存器rGPECON = 0x00005555 数据寄存器是2个字节，比如端口E的数据寄存器rGPEDAT=0x0020关于赋值，也写一个小例子rGPDCON = ((rGPDCON | 0x00005555) &amp; 0xFFFF5555);//GPD0~GPD7配置为输出模式先置位，然后再清零。ARM微处理器的七种运行模式 用户模式：user （没有SPSR寄存器）：正常程序执行的模式 系统模式 – SYS （没有SPSR寄存器）： 用于运行特权级的操作系统任务 快速中断模式 – FIQ ：用于高速数据传输和通道处理、高速中断！ 外部中断模式 – IRQ ：用于通常的中断处理 管理模式 – SVC ：又称特权模式，操作系统使用的一种保护模式 终止模式 – ABT ：用于虚拟存储及存储保护，处理存储器故障 未定义指令模式 – UND ：用于支持通过软件方针硬件的协处理器 经典RAM的七种异常 复位RESET 未定义指令 UND 软件中断 SWI 指令预取终止 PABT 数据访问终止 DABT 外部中断请求 IRQ 快速中断FIQ IRQIRQ异常对应的异常向量地址为：0x00000018IRQ异常向量地址和下一个异常向量地址之间的间隔为4个字节复位异常的异常向量地址是0x00000000。系统上电复位后，将从该地址处执行程序，RAM9的体系结构规定的各异常向量地址间隔通常是4个字节，以此复位异常向量地址处通常存储一条分支指令S3C2410必备知识S3C2410拥有2个串口，UART0/UART1 控制组件包括存储器控制器、总线控制器、外部主控器、NAND FLASH（以页为单位进行闪存） 存储器控制器提供访问外部存储器所需的存储器控制信号，支持大小端模式，地址空间供1GB，8个BANK，每个BANK128MB。 以ARM芯片为信合的嵌入式系统其I/O与存储器采用统一编址的方式，并不像×86那样采用I/O映射编址（独立编址） 只有BANK0是总线16、32位的访问，其他BANK均可以进行8、16、32位的访问 GPIO 有GPIOA~H 哈佛体系结构，数据与程序存储分开 哈佛体系结构，数据与程序存储分开 内部集成ADC矩阵按键代码 123456789101112131415161718192021222324252627282930&gt; \#define KEYOUTPUT (*(VOLATILE int8u *)0X56000044)&gt; \#define KEYINPUT (*(VOLATILE int8u *)0X56000044)&gt; INT16U ScanKey()&gt; &#123;&gt; INT16U key = 0xFFFF;&gt; INT16U i;&gt; INT8U temp=0xFF, output;&gt; rGPECON = ((rGPECON &amp; 0xFFFFFF00) | 0x00000055); //初始化GPE0~GPE3为输出&gt; rGPECON = rGPECON &amp; 0xFFFFFF0F; //初始化GPE4~GPE7为输入&gt; //判断键盘中是否有键按下&gt; for(i=1; ((i&lt;=8) &amp;&amp; (i&gt;0)); i&lt;&lt;=1)&gt; &#123;&gt; output |= 0xFF;&gt; output &amp;= (~i);&gt; KEYOUTPUT = output;&gt; temp = KEYINPUT;&gt; if((temp &amp; 0xF0) != 0xF0)//判断列信号是否全部为1&gt; &#123;&gt; key = (~i);&gt; key &lt;&lt;= 8;&gt; key |= ((temp &amp; 0xF0)|0x0F);&gt; return key;&gt; &#125;&gt; &#125;&gt; return 0xFFFF;&gt; &#125;&gt; //key返回判断哪个按键的方法：最高4位和最低四位都是1，&gt; //即 1111 ---- ---- 1111，然后次高字节是行，再次高是列，&gt; //比如第2行第3个按键按下, 对应为 1111 1101 1011 1111 - 0xFDBF&gt; 网络WLAN通信协议是802.11 传输速率可达到11Mbps，54Mbps，108Mbps。IPIP地址分为A类、B类、C类三个基本类。另外两类分别为组播地址和备用地址。 IP地址解决了网络中所有计算机统一编址的问题 IP数据报是一种独立于各种物理网络的数据包格式 路由器是实现网络与网络互连的关键设备A类 1.0.0.0 到126.255.255.255 分配给具有大量主机而局域网络数量较少的大型网络 由1个字节的网络地址和3个字节主机地址组成 网络地址的最高位必须是“0”，即第一字段的范围 0~127，但是由于全0和全1的地址用作特殊用途，实际可指派的第一个字段范围是1~126 每个IP地址可连16387064台主机，Internet有126个A类地址 可以用于多目的地址发送，言外之意可以组播B类 128.0.0.0到191.255.255.255 用于国际性大公司和政府机构 前两个八位字节指明网络，后两个八位字节指明网络上的主机C类C类IP地址范围192.0.0.0 ~ 223.255.255.255 第1、2、3字节为网络地址，第四个字节为主机地址 C类地址数量较多，使用于局部局域网中，每个网络中最多包含254台计算机 用于一般小公司 校园网 研究机构以太网数据帧（里面不包括IP地址）前导码（7个字节） -&gt; 帧起始界定符(1字节) -&gt; 目的MAC地址(6字节) -&gt; 源MAC地址（6字节）-&gt; 类型/长度（2字节） -&gt; 数据(46~1500字节) -&gt;帧校验序列(4字节) 局域网采用分组交换技术 发送设备MAC地址 - &gt; 接收设备MAC地址 -&gt; 控制信息 -&gt;有效载荷 -&gt; 校验信息路由器多个异构或者同构网络进行互联 网络层 集线器来放大信号实现远距离传输 协议转换器：用于传输层及以上各层的协议转换 热点 - 正式名称无线接入点，它实际上是一个无线交换机或无线路由器。局域网按照介质所使用的访问控制方法可分为：以太网，FDDI网和令牌网 必不可少的部分是集线器与交换机指令集Thumb指令集是16位的，ARM指令集是32位的，中间有Thumb-2作为桥接。ARM处理器的三种工作状态 ARM状态 (指令宽度32) Thumb 及 Thumb-2状态 调试状态 Thumb状态和ARM状态的切换 通过BX指令，写数据到操作数寄存器（R0）的最低位。 R0[0]=1 – 从RAM状态切换到Thumb状态。 R0[0]=0 – 从Thumb状态切换到RAM状态。 RAM复位后的状态ARM处理器复位后的状态都是ARM状态BootLoader U-BOOT Linux中引导程序加载时所支持不同体系结构处理器种类最多的Bootloader 是- U-BOOT。 全称universal-Boot-Loader 支持PowerPC、x86、ARM等多种体系结构的处理器 支持嵌入式Linux、VxWorks、QNX、RTEMS、Windows CE等操作系统采用两个阶段完成操作系统的引导加载 引导加载程序主要完成：加电自检、外设存在自检、内存地址映射、初始化外围设备、内存寻址定位、加载并启动操作系统 BootLoader通常分为stage1和stage2两大部分。依赖于CPU的体系结构，比如设备初始化代码通常放在stage1中，且使用汇编语言实现，以达到短小精悍的目的。stage2通常用于C语言实现更复杂的功能，同时代码也具有更好的可读性和可移植性。 BootLoader的stage1的基本步骤是：基本硬件初始化，为加载stage2准备RAM空间，拷贝stage2的执行代码到RAM空间中，设置栈区指针SP，跳转到stage2的C程序入口点。 作用 改变程序大小端排序 关闭看门狗 屏蔽中断 设置各个时钟 设置从SLEEP或者IDLE启动时的程序 初始化SDRAM 设置各模式指向的堆栈 设置好中断向量表 判断是从NOR FLASH（行读写，较慢）还是NAND FLASH（页读写）启动 将文件拷到SDRAM中 操作系统IOS 的前身是 UNIX-BSD（宏内核架构，但是是微内核操作系统）内核的概念内核提供任务调度、任务间通信与同步、任务管理、时间管理和存储管理。典型的单片机程序在程序指针复位后，首先进行堆栈、中断、中断向量、定时器、串行口等接口设置、初始化数据存储区和显示内容，然后就来到了一个监测、等待或空循环，在这个循环中，CPU可以监视外设、响应中断或用户输入。 这段主程序可以看作是一个内核，内核负责系统的初始化和开放、调度其它任务，相当于C语言中的主函数。 现代操作系统设计中，为减少系统本身的开销，往往将一些与硬件紧密相关的（如中断处理程序、设备驱动程序等）、基本的、公共的、运行频率较高的模块（如时钟管理、进程调度等）以及关键性数据结构独立开来，使之常驻内存，并对他们进行保护。通常把这一部分称之为操作系统的内核。Linux UCLinux、RTLinux、uC/OS - II是开源嵌入式操作系统 Linux最初以Unix为原型，以实现POSIX标准作为其目标。 OS服务组件、用户进程、Linux内核、硬件 系统调用是Linux中用户进程和操作系统之间的重要接口！ Linux和Unix其两者源码是完全不相同的，尽管函数和命令的功能处理结果、函数名称和参数十分相同，以及Unix的行命令、驱动程序和应用程序在Linux上能够运行。 Linux运行效率没有Unix高！Linux命令 arm - linux - gcc交叉编译器来编译应用程序 要对一个应用程序进行调试排错，应在编译指令中加g参数对它进行编译Linux内核主要由5个子系统组成 进程调度（SCHED） 内存（任务）管理（MM） 虚拟文件系统（VFS） 网络接口（NET） 进程间通信（IPC） 进程调度模块负责控制进程对CPU资源的使用，所采取的调度策略是使得各个进程能够平均访问CPU，同时保证内核能及时地执行硬件操作。 内存管理模块的功能之一是屏蔽各种硬件接口内存结构的差异并向上返回一个统一的访问接口 网络接口模块包含网络接口驱动程序 支持进程之间的各种通信机制，其通信机制包括：信号、管道、消息队列、信号量、共享内存、套接字（socket）微内核和宏内核微内核特征 内核小巧，传统操作系统中的许多部分都被移出内核。 接口一致，所有进程请求使用统一接口，进程不区分内核模式和用户模式服务。 各个功能模块之间松散耦合，只完成服务功能，系统管理功能交给一个或多个特权服务程序。 微内核扩充方便，但是各个功能之间的切换引起的开销很大！ 属于微内核的典型嵌入式操作系统有：Symbian、VxWorks、QNX、uC/OS - II、IOS，而Symbian是普通实时操作系统VxWorks收取授权费和版权费。VxWokrs用于尖端科技中宏内核 传统操作系统常采用的结构 应用程序效率高 切换开销小 对外来时间反应速度快 内存大 拓展性不高，维护困难 可预测性较低 可靠性较低 Android OS是典型的宏内核操作系统 宏内核又称为单内核！Tiny OS是开放源代码操作系统，属于深度轻量级的操作系统，专为嵌入式无线传感器网络设计，功耗较低，特别适合传感器这种受内存，功耗限制的设备。 轻线程，主动消息和组件化编程。QNX符合POSIX基本标准和实时标准 微内核操作系统 内核提供四种服务：进程调度，进程间通信，底层网络通信和中断处理uC/OS-II 抢占式实时操作系统 抢占式实时操作系统且每个任务都有自用栈 使用它的栈空间校验函数，可以确定每个任务到底需要多少栈空间 该系统不包含设备驱动程序，只是一个纯内核 不支持时间片轮转调度，所以赋给每个任务的优先级是不相同的 允许每个任务之间有不同的栈空间 升级版的UC/OS - III是商用操作系统 II 具有良好的可剪裁性和可移植性 能够支持的任务数最多是64（保留8个给系统，实际剩下56个） 最多允许的中断嵌套层数可以达到255层 软件结构一般具有：应用软件层，API层，内核层和设备驱动层 该系统能提供周期性时钟信号（时钟节拍），用于实现任务的正确延时和超时确认，节拍率在10~100Hz之间 用户必须在多任务调度启动以后再使能时钟节拍中断 在中断返回之前，必须调用退出中断函数 voidIntExit(void) 互斥信号量可以解决优先级反转的问题 事件控制块用以对信号的管理 任务管理中空闲任务是系统创建的第一个任务（空闲任务永远不会处于挂起态，还可能运行态，即使优先级最低，一旦其他任务都被堵塞他就可以执行了！） 中断服务子程序的伪码结构：保存全部CPU寄存器到栈，调用OSIntEnter()或者OSIntNesting变量加1，执行中断服务代码或发出IPC信息通知特定任务去执行中断服务，调用OSIntExit()函数，恢复所有CPU寄存器，执行中断返回指令。 uC/OS-II 移植到一个 嵌入式系统电路板上正常运行，必须具备的条件 处理器的C编译器能产生可重入代码，且用C语言就可以打开和关闭中断。 处理器支持中断，并且能产生定时中断。（通常在10至100Hz之间）。 处理器支持能够容纳一定量数据（可能几千字节）的硬件栈区。 uC/OS-II 保护任务之间的共享数据和提供任务之间的通信，可达到保护目的方法通常有 利用宏OS_ENTER_CRITICAL()和OS_EXIT_CRITCAL来打开和关闭中断。 利用函数OSSchedLock()和OSSchedUnlock()对任务调度函数上锁和开锁。 利用信号量、互斥量、邮箱和消息队列进行任务间通信。 系统启动过程中，Bootloader执行完毕后，调用应用程序主文件（通常是main.c）里的main函数。main函数在执行过程中除了用户函数和硬件初始化函数之外，需要执行下面三个重要函数：OSInit() -&gt; OSTaskCreate() -&gt; OSStart()(注意先后顺序)OSInit()函数先建立最初的任务就绪表，然后建立4个空白的数据链表，即：任务控制块链表，事件控制块链表、标志链表、内存控制块链表。系统中任务的五种状态 休眠态（任务停留在内存中，还没有交给内核管理。） 就绪态（该任务已经准备好，可以运行了，但是由于任务的优先级比正在运行任务的优先级低，还暂时不能运行。）（还有一种情况被更高优先级打断！） 运行态（任务得到了CPU的控制权正在运行之中） 挂起态 被中断态（发生中断执行相应的中断服务，原来在正在运行后的任务暂时停止运行，进入被中断状态） 一些系统函数 OSTaskCreate() - 任务创建相关 OSCtxSw() - 真正实现任务切换的函数 OSIntExit() - 中断级的调度 OSTickISR() - 时钟节拍中断服务子程序，与时间管理相关 OSSched() - 任务前导函数，任务级的调度函数 判断任务调度的三个条件是： 中断嵌套层数共享全程变量OSIntNesting = 0，也就是所有的ISR已经执行完毕 任务调度加锁层数共享全程变量OSLockNesting = 0，也就是调度没有被禁止 就绪表找到最高优先级比当前任务的优先级高 OSIntExit() - 中断级的调度函数 系统事件控制块的相关函数 OSSemCreate()(信号量创建) OSMutexCreate()(创建互斥体) OSMboxCreate()(建立一个邮箱) OSQCreate()(创建事件控制块) 就绪任务登记在就绪表中，OSRdyTbl[ ] 是就绪表的位图映像矩阵，每一位代表了一个优先级任务的就绪状态，成为就绪位，该矩阵最多有64位。 一些系统文件 OS_CPU_C.C - 创建任务的自用栈空间、定义用户接口的hook原型 OS_CORE.C - 核心调度代码，包括系统初始化、启动多任务调度开始运行、任务创建管理与调度、TCB初始化、就绪表初始化、ECB初始化、任务事件就绪表、空闲任务 OS_MEM.C - 内存管理，包括创建分区，获得存储块 OS_TASK.C - 任务管理，包括改变一个任务的优先级、创建或者删除一个任务，恢复一个被挂起的任务 uC/OS系统时钟内核的基本功能（通过GLIBC调用通用函数和内核的内部功能） 任务管理 时间管理 内存管理 任务调度 任务间通信和同步 实时操作系统与非实时操作系统实时系统 民航导航系统 防空预警系统 电力输送控制系统 非实时 视频播放系统 博客发布系统 手机交互式城市交通导航系统 实时操作系统RTOS响应中断请求并且完成相应的中断服务子函数的时间非常快！精细衡量这个时间一致性变化的术语是抖动！ 中断服务子函数也是可以调用函数然后进行事件处理的，中断服务子程序返回的最后一步执行中断返回指令。RTOS特征(主要特征是能够及时响应外部发生的随机任务请求并且能够在规定的时限内完成任务。)（不包括轮转调度） 异步IO和中断处理能力 任务切换时间和中断延迟时间确定 优先级中断和调度 抢占式调度 内存锁定 连续文件 同步 RTOS的实时性能主要由三个指标衡量 响应时间（包括中断延迟时间和任务切换时间）（任务切换时间又包括人物抢占时间） 吞吐量 生存时间 响应时间有两个指标 - 中断延迟时间和任务切换时间 实时系统对时间约束要求的严格性，使可预测性成为实时系统的一项重要性能要求，它是指RTOS能够对外部事件的响应时间和实时任务的执行时间进行判断，以确定被时间触发的实时任务能否在规定的时间内完成。 一般按照相应时间能将实时系统分为三类：强实时系统，其相应时间一般在ms级或us级；普通实时操作系统一般在s级，弱实时系统一般在数十s级。 任务时限有两种 截止时间：任务开始执行时间到任务必须完成的时间间隔。 任务执行预设：又叫任务最快完成时间，这是在无中断响应情况下的任务最快执行时间。 硬实时操作系统和软实时操作系统 任务执行时间超过截止时间系统的总损益就为负，这种实时系统成为硬实时系统。而且伴随有严重的后果，比如飞机控制器、核反应堆处理装置。 软实时操作系统超过时限并不会造成严重的影响比如：DVD播放机。 存储器半导体存储器芯片的存储容量取决于该芯片的地址总线的条数和数据总线的位数。 存储器带宽与存储器总线的工作频率有关，也与数据线的位数和每个总线周期的传输次数有关！ 系统正在运行的程序的大部分数据和代码存放在主存储器（内存）中 系统尚未运行的程序的大部分数据和代码存放在外部存储器中分类 按照存取特性分为：RAM和ROM 按照物理位置分为：片内存储器和片外存储器以及外部存储器 按照存储信息的类型分为：程序存储区和数据存储器RAM RAM - 高速读取， DRAM - 高集成度 RAM 通常又有DRAM和SRAM之分，SRAM较DRAM电路复杂，但是速度更快，高速缓冲区(cache)就是典型的SRAM。 SRAM的复杂决定了它做不大，至多几十K。 内存条就是DRAM，速度较SRAM慢，但是可以做的很大，比如内存条就是典型的DRAM，其容量就上G了。 FRAM - 铁电随机存取存储器，MRAM - 磁性随机存取存储器。 （以上两个随机存储器是非易失性存储器）FLASHFlash闪存有两大类，或非型（NOR Flash）和与非型（NAND Flash）。 或非以字节为单位进行随机存取，存储在里面的程序可以被CPU执行。与非以页为单位进行存取，速度较前者慢。 与非门读出程序或数据时，是先将其预存入RAM，然后才被使用的。虽然速度较慢，但是其寿命，容量成本等方面有很大优势，常用的U盘基本都是NAND Flash。DDRDDR - dual data rate - 双倍数据速率 DDR2 - 使原来DDR可预取读取2位变成可预取读取4位或8位，把DDR的数据传输速率又提升了两倍或四倍USBUSB2.0 的速度可达到 480Mb/s USB3.0的速度可达到 5Gb/s, 即640MB/s 半双工差分方式通信编码**ASCII**ASCII共128个字符，96个可打印字符，32个控制字符。 ASCII是7位编码，但在计算机里用一个字节存放（计算机最基本的存储和处理单位） 每个字节多出的1位在计算机内部常保持为0，在数据传输中是奇偶校验位。汉字编码GB2312 – 两字节编码（每个字节最高位默认为1），包含常用的中国汉字和图形符号。 GB18030 与国际Unicode相兼容。单字节对应ASCII，双字节对应汉字（GB2312在这完全适用，但是比它范围广），其余四字节对应其他字符。UnicodeUTF-8 – 单字节可变长编码，单字节向下兼容ASCII，音节文字对应两字节，CJK汉字(china japan koera 中日韩汉字)对应三字节，其余对应四字节。Linux 常用。 UTF-16 – 双字节可变长编码，CJK汉字及常用字符两字节，其余四字节。JAVA .NET 常用。同步IO和异步IOCPU的速度远远快于磁盘、网络等IO。在一个线程中，CPU执行代码的速度极快，然而，一旦遇到IO操作，如读写文件、发送网络数据时，就需要等待IO操作完成，才能继续进行下一步操作。这种情况称为同步IO。在IO操作的过程中，当前线程被挂起，而其他需要CPU执行的代码就无法被当前线程执行了。因为一个IO操作就阻塞了当前线程，导致其他代码无法执行，所以我们必须使用多线程或者多进程来并发执行代码，为多个用户服务。每个用户都会分配一个线程，如果遇到IO导致线程被挂起，其他用户的线程不受影响。多线程和多进程的模型虽然解决了并发问题，但是系统不能无上限地增加线程。由于系统切换线程的开销也很大，所以，一旦线程数量过多，CPU的时间就花在线程切换上了，真正运行代码的时间就少了，结果导致性能严重下降。另一种解决IO问题的方法是异步IO。当代码需要执行一个耗时的IO操作时，它只发出IO指令，并不等待IO结果，然后就去执行其他代码了。一段时间后，当IO返回结果时，再通知CPU进行处理。指令相关子程序返回调用程序除了MOV PC, LR。还可以MOV R15, LR 汇编语言调用一个名为My的子程序的指令为： BL My 子程序返回调用程序的指令为：MOV PC, LR。 Thumb - 2指令集中关外部中断使用的指令是：CPSID I。开外部中断的指令为：CPSIE I。 EQ表示相等，NE表示不等 RAM汇编程序采用分支指令B 子程序调用指令BL 条件转移指令BX RAM汇编中没有专门的指令实现循环，一般采用比较指令CMP、ADD、SUB等才能产生条件的指令，然后再通过带状态的条件转移指令BX来实现。 指令后面加个！表示更新基地址寄存器符号 寄存器间接寻址就是以寄存器中的值作为操作数地址，而操作数本身存放在存储器中。用于间接寻址的寄存器必须用[ ] 括起来 Test EQU 50 定义 标号 Test的值为50! RAM完成有条件无符号加法运算，并更新CPSR中的状态，条件如果是相等，要求指令执行R1+R2，结果放入R3中，则这条指令ADDCEQ R3, R1, R2。如果条件是大于，要求执行R1 - R2，结果放入R3，则该指令是SUBHIS R3, R1, R2指令的条件码总结 EQ - 相等 NE - 不等 MI - minus负数 PL - plus正数或0 vs - overflow set溢出 vc - overflow clear未溢出 GT - greater than带符号数大于 GE - greater and equal带符号数大于或等于 LT - lower than带符号数小于 LE - lower equal带符号数小于或等于 HI - high无符号数大于 CS - carry same无符号数大于或等于 CC - carry clear无符号数小于 LS - low and same无符号数小于或等于 常考指令 LDR 字数据加载指令(存储器到寄存器的数据传送指令) LDRB 字节数据加载指令 LDRH 半字数据加载指令 STR 字数据存储指令 STRB 字节数据存储指令STRH 半字数据存储指令 STR R0, [R1] - 将R0中一个字的数据，存入以R1的值为地址的存储器中。 LDR R0, [R1] - 以R1的值为地址的存储器中的字数据（为32位）读入寄存器R0 LDRH R0, [R1] -以R1的值为地址的存储器中的半字数据（为16位）读入寄存器R0 LDRB R0, [R1] -以R1的值为地址的存储器的字节数据（为8位）读入寄存器R0 注意了，LDR R1, #0x12345678 LDR是加载存储指令，表示存储器到寄存器的数据传送，而#是立即数符号，表示立即数寻址。所以这样写是不正确的！ ADC R1, R2, R3 表示 R1 = R2+R3+C（C表示进位）（ADD表示加法）（ADC表示）置1清0的操作常见的操作是：or可实现置1，and可实现清0。比如ORR R0，R0，＃00000003 该指令设置R0的0、1位，其余位保持不变。再比如AND R0，R0，＃FFFFFFFE实现R0的最低位清零。还有一个是用ARM的指令进行位清0，BIC R1, R1 #0X00000088立即数 汇编语言中中操作数有三种：寄存器操作数、存储器操作数和立即数。 其中立即数相当于高级语言中的常量（常数），它是直接出现在指令中的数，不用存储在寄存器或存储器中的数，如指令ADD AL,06H中的06H即为立即数。大小端存储所谓的大端模式就是，低地址存储高位字节。所谓的小端模式就是，低地址存储低位字节。计算机存储结构冯诺依曼，是一种程序指令储存和数据储存在一起的存储器结构哈佛结构，是一种将程序指令储存和数据储存分开的存储器结构音频图像 音频数字音频的正确处理顺序是：取样 -&gt; 量化 -&gt; 编码 数字音频的主要参数：取样频率、量化位数、声道数目、使用的压缩编码方法、比特率 比特率（码率）计算方式：码率 = 取样频率×量化位数×声道数，压缩后的码率和压缩前的码率也就差一个压缩比。 mp3:MPEG - 1层③算法进行有损的压缩编码，以8~12倍的比率大幅度降低了声音的数据量图像包括BMP.、TIF、GIF、JPEG、PNG 数字图像的获取过程分为：扫描、分色、取样 GIF是互联网上广泛使用的一种图像文件格式，它的颜色数目较少，不超过256色，文件特别小，适合互联网传输 JPEG是静止图像数据压缩编码的国际标准，特别适合处理各种连续色调的彩色和灰度图像，算法复杂度适中，软硬件皆可实现。屏幕 触摸屏 电阻式触摸屏（软屏），结构简单价格低 电容式触摸屏（硬屏），结构复杂价格高 电容式触摸屏可以实现多点触摸和滑动操作 般写硬笔字的触摸屏是电阻屏 LCD显示屏 LCD显示屏自身不带控制器，没有驱动电路，仅仅是显示器件，价格最低 LCD显示模块内置LCD显示屏，控制器和驱动模块，有字符型和图形点阵型 PC机通常使用的是LCD显示器，除具备显示屏外，还包括驱动器，控制器以及外壳，是完整的LCD显示设备 DVI、VGA以及HDMI是一种接口标准 其他 微波通信：手机通信、卫星通信、无线局域网 调频广播属于短波以及超短波通信。]]></content>
      <categories>
        <category>学习</category>
      </categories>
      <tags>
        <tag>转载</tag>
        <tag>嵌入式</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Linux 源码安装及卸载]]></title>
    <url>%2Fpost%2Fb01d34de.html</url>
    <content type="text"><![CDATA[1. 源码的安装源码安装的步骤大致分为四步：下载（download）、配置（configure）、编译（make）、安装（make install）。 下载 下载源码的方式有许多，记录使用过的几个 git 下载，已知源码的 github 地址可以执行 git clone 地址 下载，可以直接将源码文件夹下载至本地。 直接自行下载源码的压缩包，并解压 eg以.tar后缀的可以用tar -xzf命令解压 wget 下载：支持FTP及HTTP协议下载支持断点续传及代理服务器下载 配置 在源码目录执行./configure --prefix=PATH #PATH为自定义安装目录 configure文件是一个可执行的脚本文件，它有很多选项，在待安装的源码目录下使用命令./configure –help可以输出详细的选项列表。 其中–prefix选项是配置安装目录，如果不配置该选项，安装后可执行文件默认放在/usr /local/bin，库文件默认放在/usr/local/lib，配置文件默认放在/usr/local/etc，其它的资源文件放在/usr /local/share，比较凌乱。 如果配置了–prefix，如： $ ./configure --prefix=/usr/local/test 安装后的所有资源文件都会被放在/usr/local/test目录中，不会分散到其他目录。 使用–prefix选项的另一个好处是方便卸载软件或移植软件；当某个安装的软件不再需要时，只须简单的删除该安装目录，就可以把软件卸载得干干净净；而移植软件只需拷贝整个目录到另外一个机器即可（相同的操作系统下）。 综上：**强烈建议配置 --prefix方便后期移植及卸载 编译 执行make 安装 **执行`make install 为了记录安装详情方便后期，可输出安装日志，具体命令如下 make &gt;&amp; LOG_make &amp;make install &gt;&amp; LOG_install &amp; 2. 通过源码安装软件的卸载 如果configure时配置了 –prefix 则可以直接通过rm 如果源码包提供了make uninstall ，则可以通过在源码目录下执行make uninstall命令卸载 如果没有配置–prefix选项，源码包也没有提供make uninstall，则可以通过以下方式可以完整卸载： 找一个临时目录重新安装一遍，如： $ ./configure --prefix=/tmp/to_remove &amp;&amp; make install 然后遍历/tmp/to_remove的文件，删除对应安装位置的文件即可（因为/tmp/to_remove里的目录结构就是没有配置–prefix选项时的目录结构）。 参考地址： https://blog.csdn.net/u011334621/article/details/78506404 https://www.zhihu.com/question/20092756]]></content>
      <categories>
        <category>学习</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[windows常用命令（转载）]]></title>
    <url>%2Fpost%2F67780d28.html</url>
    <content type="text"><![CDATA[打开”运行“对话框（Win+R），输入cmd，打开控制台命令窗口… 也可以通过cmd /c 命令 和 cmd /k 命令的方式来直接运行命令 注：/c表示执行完命令后关闭cmd窗口；/k表示执行完命令后保留cmd窗口 控制台命令窗口中一些技巧复制内容：右键弹出快捷菜单，选择“标记(K)”，然后选中所需复制的内容，然后右键即可 粘贴内容：右键弹出快捷菜单，选择“粘贴(P)” 在文件夹空白处按住Shift，然后右键弹出快捷菜单，可以看到“在此处打开命令行窗口” 使用上下方向键，翻看使用过的命令 tab补全功能 命令参数的路径：要使用反斜杠’ \ ‘，不要使用正斜杠’ / ‘ 如：del d:\test2\file\my.txt 命令参数的路径：若存在空格，应使用双引号将路径引起来 如：del “d:\program files\file\my.txt” 文件及目录名中不能包含下列任何字符：\ / : * ? “ &lt; &gt; | rem // 在批处理文件中添加注解，其后的命令不会被执行，但会回显 :: // ::也可以起到rem的注释作用，且不会有回显 任何以冒号:开头的字符行, 在批处理中都被视作标号（label）, 而直接忽略其后的所有内容有效标号：冒号后紧跟一个以字母数字开头的字符串，goto语句可以识别无效标号：冒号后紧跟一个非字母数字的一个特殊符号，goto无法识别的标号，可以起到注释作用，::常被用作注释符号 0. 获取帮助command /? // 查看command命令帮助说明 1. 中断命令执行Ctrl + C 2. 文件/目录cd 切换目录例：cd // 显示当前目录 例：cd .. // 进入父目录 例：cd /d d: // 进入上次d盘所在的目录（或在直接输入：d:） 例：cd /d d:\ // 进入d盘根目录 例：cd d: // 显示上次d盘所在的目录 例：cd /d d:\src // 进入d:\src目录 例：cd prj\src\view // 进入当前目录下的prj\src\view文件夹 其中 /d 的作用是转换盘符，也可直接输入盘符转换 eg: D: 或 cd /d D: pushd popd 使用栈来维护当前目录md d:\mp3 // 在C:\建立mp3文件夹md d:\mp4 // 在D:\建立mp4文件夹cd /d d:\mp4 // 更改当前目录为d:\mp4pushd c:\mp3 // 将当前目录d:\mp4入栈，并切换当前目录为c:\mp3popd // 将刚才保存的d:\mp4弹栈，并设置为当前目录 dir 显示目录中的内容例：dir // 显示当前目录中的子文件夹与文件 例：dir /b // 只显示当前目录中的子文件夹与文件的文件名 例：dir /p // 分页显示当前目录中的子文件夹与文件 例：dir /ad // 显示当前目录中的子文件夹 例：dir /a-d // 显示当前目录中的文件 例：dir c:\test // 显示c:\test目录中的内容 例：dir keys.txt // 显示当前目录中keys.txt的信息 例：dir /S // 递归显示当前目录中的内容 例：dir key* // 显示当前目录下以key开头的文件和文件夹的信息 例：dir /AH /OS // 只显示当前目录中隐藏的文件和目录，并按照文件大小从小到大排序 tree 显示目录结构例：tree d:\myfiles // 显示d:\myfiles目录结构 ren 文件或目录重命名例：ren rec.txt rec.ini // 将当前目录下的rec.txt文件重命名为rec.ini 例：ren c:\test test_01 // 将c盘下的test文件夹重命名为test_01 例：ren Logs.txt Logs-%date:~0,4%%date:~5,2%%date:~8,2%_%time:~0,2%%time:~3,2%.txt // 将当前目录下的Logs.txt文件重命名为Logs-20150114_2135.txt或Logs-20150114_ 812.txt（注意：小时只有个位数时会多一个空格，可以使用字符串替换：将空格替换成0） md 创建目录例：md movie music // 在当前目录中创建名为movie和music的文件夹 例：md d:\test\movie // 创建d:\test\movie目录 rd 删除目录例：rd movie // 删除当前目录下的movie空文件夹 例：rd /s /q d:\test // 使用安静模式删除d:\test（除目录本身外，还将删除指定目录下的所有子目录和文件） copy 拷贝文件例：copy key.txt c:\doc // 将当前目录下的key.txt拷贝到c:\doc下（若doc中也存在一个key.txt文件，会询问是否覆盖） 例：copy jobs c:\doc // 将当前目录下jobs文件夹中文件（不递归子目录）拷贝到c:\doc下（若doc中也存在相应的文件，会询问是否覆盖） 例：copy key.txt c:\doc\key_bak.txt // 将当前目录下的key.txt拷贝到c:\doc下，并重命名为key_bak.txt（若doc中也存在一个key_bak.txt文件，会询问是否覆盖） 例：copy /Y key.txt c:\doc // 将当前目录下的key.txt拷贝到c:\doc下（不询问，直接覆盖写） 例：copy key.txt + // 复制文件到自己，实际上是修改了文件日期 例：copy /Y key1.txt + key2.txt key.txt // 将当前目录下的key1.txt与key2.txt的内容合并写入key.txt中（不询问，直接覆盖写） 例：copy /B art_2.7z.* art_2.7z // 将当前目录下的art_2.7z.开头的所有文件（按照名称升序排序）依次合并生成art_2.7z 例：copy /B art_2.7z.001+art_2.7z.002 art_2.7z // 将当前目录下的art_2.7z.001、art_2.7z.002文件合并生成art_2.7z xcopy 更强大的复制命令例：xcopy c:\bat\hai d:\hello\ /y /h /e /f /c // 将c:\bat\hai中的所有内容拷贝到d:\hello中 注意：需要在hello后加上\ 表示hello为一个目录，否则xcopy会询问hello是F，还是D 例：xcopy c:\bat\hai d:\hello\ /d:12-29-2010 // 将c:\bat\hai中的2010年12月29日后更改的文件拷贝到d:\hello中 move 移动文件例：move *.png test // 将当前目录下的png图片移动到当前目录下test文件夹中 （若test中也存在同名的png图片，会询问是否覆盖） 例：move /Y *.png test // 将当前目录下的png图片移动到当前目录下test文件夹中 （不询问，直接覆盖写） 例：move 1.png d:\test\2.png // 将当前目录下的1.png移动到d盘test文件夹中，并重命名为2.png （若test中也存在同名的png图片，会询问是否覆盖） 例：move test d:\new // 若d盘中存在new文件夹，将当前目录下的test文件夹移动到d盘new文件夹中；若不存在，将当前目录下的test文件夹移动到d盘，并重命名为new del 删除文件 (目录及子目录都不会删除)例：del test // 删除当前目录下的test文件夹中的所有非只读文件（子目录下的文件不删除；删除前会进行确认；等价于del test*） 例：del /f test // 删除当前目录下的test文件夹中的所有文件（含只读文件；子目录下的文件不删除；删除前会进行确认；等价于del /f test*） 例：del /f /s /q test d:\test2*.doc // 删除当前目录下的test文件夹中所有文件及d:\test2中所有doc文件（含只读文件；递归子目录下的文件；删除前不确认） ++++++++++++++++++++++ /ar、/ah、/as、/aa 分别表示删除只读、隐藏、系统、存档文件/a-r、/a-h、/a-s、/a-a 分别表示删除除只读、隐藏、系统、存档以外的文件 ++++++++++++++++++++++ 例：del /ar . // 删除当前目录下所有只读文件 例：del /a-s . // 删除当前目录下除系统文件以外的所有文件 replace 替换文件即使这个文件在使用，仍然可以替换成功 例：replace d:\love.mp3 d:\mp3 // 使用d盘下的love.mp3强制替换d盘mp3目录中的love.mp3文件 mklink 创建符号链接 Win7引入；创建的符号链接文件上会有一个类似快捷方式的箭头 win7下的mklink命令通过指定参数可以建立出不同形式的文件或目录链接，分为硬链接(hard link)、符号链接(symbolic link)和目录联接(junction)三种。 (1) 符号链接(symbolic link) 建立一个软链接相当于建立一个文件（或目录），这个文件（或目录）用于指向别的文件（或目录），和win的快捷方式有些类似。 删除这个链接，对原来的文件（或目录）没有影像没有任何影响；而当你删除原文件（或目录）时，再打开链接则会提示“位置不可用”。 (2) 目录联接(junction) 作用基本和符号链接类似。区别在于，目录联接在建立时会自动引用原目录的绝对路径，而符号链接允许相对路径的引用。 (3) 硬链接(hard link) 建立一个硬链接相当于给文件建立了一个别名，例如对1.txt创建了名字为2.txt的硬链接； 若使用记事本对1.txt进行修改，则2.txt也同时被修改，若删除1.txt，则2.txt依然存在，且内容与1.txt一样。 建立链接请注意：a、建立文件或目录链接限于 NTFS 文件系统；符号链接（目录联接）的建立可以跨分区（如：在d盘可以建立c盘文件或目录的链接），硬链接只能建立同一分区内的文件指向b、硬链接只能用于文件，不能用于目录；目录联接只能用于目录；符号链接则均可以；c、硬链接不允许对空文件建立链接，符号（软）链接可以。 +++++++++++++++++++++++++++++++++ mklink [[/d] | [/h] | [/j]] Link Target /d 创建目录符号链接。黙认为文件符号链接。/h 创建硬链接，而不是符号链接。/j 创建目录联接。Link 指定新的符号链接名称。Target 指定新链接引用的路径(相对或绝对)。 +++++++++++++++++++++++++++++++++ 例：mklink /j “C:\Users” “D:\Users” // 创建D盘Users目录联接到C盘，并命名为Users attrib 查看或修改文件或目录的属性【A：存档 R：只读 S：系统 H：隐藏】 例：attrib 1.txt // 查看当前目录下1.txt的属性 例：attrib -R 1.txt // 去掉1.txt的只读属性 例：attrib +H movie // 隐藏movie文件夹 assoc 设置’文件扩展名’关联到的’文件类型’ 例：assoc // 显示所有’文件扩展名’关联 例：assoc .txt // 显示.txt代表的’文件类型’，结果显示.txt=txtfile 例：assoc .doc // 显示.doc代表的’文件类型’，结果显示.doc=Word.Document.8 例：assoc .exe // 显示.exe代表的’文件类型’，结果显示.exe=exefile 例：assoc .txt=txtfile // 恢复.txt的正确关联 ftype 设置’文件类型’关联到的’执行程序和参数’例：ftype // 显示所有’文件类型’关联 例：ftype exefile // 显示exefile类型关联的命令行，结果显示 exefile=”%1” %* 例：ftype txtfile=C:\Windows\notepad.exe %1 // 设置txtfile类型关联的命令行为：C:\Windows\notepad.exe %1 当双击一个.txt文件时，windows并不是根据.txt直接判断用notepad.exe打开而是先判断.txt属于txtfile’文件类型’；再调用txtfile关联的命令行：txtfile=%SystemRoot%\system32\NOTEPAD.EXE %1 forfiles 递归目录执行命令例：forfiles /p . /m .svn /s /c “cmd /c svn up -r12005” // 在当前目录下查找含有.svn的文件或目录（递归子目录），并对该目录执行指定版本号svn更新 例：forfiles /p c:\myfiles /m .svn /s /c “cmd /c svn up -r12005” // 在c:\myfiles目录下查找含有.svn的文件或目录（递归子目录），并对该目录执行指定版本号svn更新 3. 文件查看type 显示文本文件内容例：type c:\11.txt // 显示c盘中11.txt的文本内容 例：type conf.ini // 显示当前目录下conf.ini的文本内容 例：type c:\11.txt | more // 分页显示c盘中11.txt的文本内容 more 逐屏的显示文本文件内容例：more conf.ini // 逐屏的显示当前目录下conf.ini的文本内容 【空格：下一屏 q：退出 】 4. 注册表命令reg 注册表相关操作参数说明： KeyName [\Machine]FullKey Machine为远程机器的机器名 - 忽略默认到当前机器。 远程机器上只有 HKLM 和 HKU。 FullKey ROOTKEY+SubKey ROOTKEY [ HKLM | HKCU | HKCR | HKU | HKCC ] SubKey 所选ROOTKEY下注册表项的完整名 /v 所选项之下要添加的值名 /ve 为注册表项添加空白值名&lt;无名称&gt; /t RegKey 数据类型 [ REG_SZ | REG_MULTI_SZ | REG_DWORD_BIG_ENDIAN | REG_DWORD | REG_BINARY | REG_DWORD_LITTLE_ENDIAN | REG_NONE | REG_EXPAND_SZ ] 如果忽略，则采用 REG_SZ /s 指定一个在 REG_MULTI_SZ 数据字符串中 用作分隔符的字符；如果忽略，则将””用作分隔符 /d 要分配给添加的注册表ValueName的数据 /f 不提示，强行改写现有注册表项 例：reg add “HKLM\SOFTWARE\Microsoft\Windows\CurrentVersion\Run” /v MyApp /t REG_SZ /d “c:\tools\myapp.exe” /f // 强制添加一条开机启动c:\tools\myapp.exe程序的注册表项 例：reg add “HKLM\SOFTWARE\ScmClient” /v AgreementConfirmed /t REG_SZ /d 1 /f // 解决32位xp打开ioa后，弹出的框关不掉问题 例：reg add “HKCU\ControlPanel\Desktop” /v WaitToKIllAppTimeOut /t REG_SZ /d 10000 /f // 强制添加一条加速关闭应用程序的注册表项 例：reg add “hkcu\software\Unity Technologies\Unity Editor 4.x” /v JdkPath_h4127442381 /t REG_SZ /f // 将JdkPath_h4127442381设置为空 例：reg add “HKCR*\shell\WinDbg\command” /t REG_SZ /d “\”D:\Program Files (x86)\windbg\windbg.exe\” -z \”%1\” “ /f // 强制添加windbg打开dump文件到右键菜单的注册表项（不指明/v，键值将写入默认值名中） 例：reg add “HKCR*\shell\WinHex\command” /t REG_SZ /d “\”D:\software-setup\system\winhex\winhex.exe\” \”%1\” “ /f // 强制添加winhex到右键菜单的注册表项（不指明/v，键值将写入默认值名中） 注册表中%1 %2 %3 %4的含义：– %1表示文件列表，%2表示默认打印机，%3表示驱动器，%4表示端口 例：reg add “hkcu\software\microsoft\windows\currentversion\internet settings” /v AutoConfigURL /t REG_SZ /d “http://txp-01.tencent.com/proxy.pac&quot; /f // 为IE设置代理：http://txp-01.tencent.com/proxy.pac 例：reg add “hkcu\software\Sysinternals\Process Monitor” /v EulaAccepted /t REG_DWORD /d 1 /f // 为Procmon.exe工具（Process Monitor为其属性面板上的描述名）添加License同意 例：reg delete “HKLM\SOFTWARE\Microsoft\Windows\CurrentVersion\Run” /v MyApp /f // 强制删除值名的MyApp的注册表项 例：reg delete “HKLM\SOFTWARE\Microsoft\Windows NT\CurrentVersion\Image File Execution Options\taskmgr.exe” /f // 强制删除让任务栏里的任务管理器为灰色的注册表项 例：reg delete HKEY_CURRENT_USER\Environment /v HTTP_proxy /f // 删除http代理 例：reg delete HKEY_CURRENT_USER\Environment /v HTTPS_proxy /f // 删除https代理 例：reg copy “hkcu\software\microsoft\winmine” “hkcu\software\microsoft\winminebk” /s /f // 强制复制winmine下所有的子项与值到winminebk中 例：reg export “hkcu\software\microsoft\winmine” c:\regbak\winmine.reg // 导出winmine下所有的子项与值到c:\regbak\winmine.reg文件中 例：reg import c:\regbak\winmine.reg // 导入c:\regbak\winmine.reg文件到注册表中 例：reg query “HKLM\SOFTWARE\Microsoft\Windows\CurrentVersion\App Paths\IEXPLORE.EXE” /s // 查询ie的安装路径 例：reg query HKCR.dsw /ve // 查询.dsw默认值 例：reg query HKEY_CURRENT_USER\Software\Tencent\QQGame\SYS /v GameDirectory // 查询QQGame安装路径 5. @#@&amp; 顺序执行多条命令，而不管命令是否执行成功 例：cd /d d:\src&amp;work.exe /o c:\result.txt // 先将当前工作目录切换到d:\src下，然后执行work.exe /o c:\result.txt命令 &amp;&amp; 顺序执行多条命令，当碰到执行出错的命令后将不执行后面的命令 例：find “ok” c:\test.txt &amp;&amp; echo 成功 // 如果找到了”ok”字样，就显示”成功”，找不到就不显示 || 顺序执行多条命令，当碰到执行正确的命令后将不执行后面的命令 例：find “ok” c:\test.txt || echo 不成功 // 如果找不到”ok”字样，就显示”不成功”，找到了就不显示 | 管道命令 例：dir . /s/a | find /c “.exe” // 先执行dir命令，然后对输出结果（stdout）执行find命令（输出当前文件夹及所有子文件夹里的.exe文件的个数） 例：dir . /s/a 2&gt;&amp;1 | find /c “.exe” // 先执行dir命令，然后对输出结果（stdout）和错误信息（stderr）执行find命令（输出当前文件夹及所有子文件夹里的.exe文件的个数） &gt; 将当前命令输出以覆盖的方式重定向 例：tasklist &gt; p1.txt // 将tasklist的输出结果（stdout）以覆盖的方式重定向到p1.txt文件中（注：tasklist的输出结果就不会打印到屏幕上了） 例：tasklist 1&gt; p1.txt // 等同于：tasklist &gt; p1.txt 例：dir bin 2&gt; p1.txt // 输出结果（stdout）打印在屏幕上，错误信息（stderr）以覆盖的方式重定向到p1.txt中（注：bin目录不存在时，会输出错误信息） 例：dir bin &gt; p1.txt 2&gt;&amp;1 // 将错误信息（stderr）重定向到输出结果（stdout），然后将输出结果（stdout）以覆盖的方式重定向到p1.txt中（注：bin目录不存在时，会输出错误信息） 例：dir bin 2&gt; p1.txt 1&gt;&amp;2 // 将输出结果（stdout）重定向到错误信息（stderr），然后将错误信息（stderr）以覆盖的方式重定向到p1.txt中（注：bin目录不存在时，会输出错误信息） 注：与上条命令结果一致 例：tasklist &gt;nul // 屏幕上不打印tasklist的输出结果（stdout），错误信息（stderr）仍会打印 例：dir bin 2&gt;nul // 屏幕上不打印命令的错误信息（stderr），输出结果（stdout）仍会打印（注：bin目录不存在时，会输出错误信息） 例：dir bin &gt;nul 2&gt;&amp;1 // 将命令的错误信息（stderr）重定向到输出结果（stdout），然后不打印输出结果（stdout）【屏幕上错误信息（stderr）和输出结果（stdout）都不打印】（注：bin目录不存在时，会输出错误信息） 例：dir bin 2&gt;nul 1&gt;&amp;2 // 将命令的输出结果（stdout）重定向到错误信息（stderr），然后不打印错误信息（stderr）【屏幕上错误信息（stderr）和输出结果（stdout）都不打印】（注：bin目录不存在时，会输出错误信息） &gt;&gt; 将当前命令输出以追加的方式重定向 例：tasklist &gt;&gt; p2.txt // 将tasklist的输出结果（stdout）以追加的方式重定向到p2.txt文件中（注：tasklist的输出结果就不会打印到屏幕上了） 例：tasklist 1&gt;&gt; p2.txt // 等同于：tasklist &gt;&gt; p2.txt 例：dir bin 2&gt;&gt; p2.txt // 输出结果（stdout）打印在屏幕上，错误信息（stderr）以追加的方式重定向到p2.txt中（注：bin目录不存在时，会输出错误信息） 例：dir bin &gt;&gt; p2.txt 2&gt;&amp;1 // 将错误信息（stderr）重定向到输出结果（stdout），然后将输出结果（stdout）以追加的方式重定向到p2.txt中（注：bin目录不存在时，会输出错误信息） 例：dir bin 2&gt;&gt; p2.txt 1&gt;&amp;2 // 将输出结果（stdout）重定向到错误信息（stderr），然后将错误信息（stderr）以追加的方式重定向到p2.txt中（注：bin目录不存在时，会输出错误信息） 注：与上条命令结果一致 &lt; 从文件中获得输入信息，而不是从屏幕上，一般用于date time label等需要等待输入的命令 例：date &lt;temp.txt // temp.txt中的内容为2005-05-01 编号 Handle 说明 0 stdin 键盘输入 1 stdout 在命令提示窗口上打印输出结果（默认） 2 stderr 在命令提示窗口上打印错误信息（默认） 3-9 undefined 应用程序自己定义和指定 @ 命令修饰符 在执行命令前，不打印出该命令的内容 例：@cd /d d:\me // 执行该命令时，不打印出命令的内容：cd /d d:/me , 在某些特殊的情况下可以用来代替空格使用 例：dir,c:\ // 相当于：dir c:\ ; 当命令相同的时候,可以将不同的目标用;隔离开来但执行效果不变。如执行过程中发生错误则只返回错误报告但程序还是会继续执行 例：dir c:\;d:\;e:\ // 相当于顺序执行：dir c:\ dir d:\ dir e:\ echo echo. // 输出一个”回车换行”，空白行 echo off // 后续所有命令在执行前，不打印出命令的内容 echo on // 后续所有命令在执行前，打印出命令的内容 echo 123 // 输出123到终端屏幕 echo “Hello World!!!” // 输出Hello World!!!到终端屏幕 echo %errorlevel% // 每个命令运行结束，可以用这个命令行格式查看返回码；默认值为0，一般命令执行出错会设errorlevel为1 echo test &gt; p1.txt // 输出test的字符串到当前目录中的p1.txt文件中（以覆盖的方式） set 显示当前用户所有的环境变量 set path // 查看path的环境变量值（准确的说是查看以path开头的环境变量） set path= // 清空path变量 set path=d:\execute // 将path变量设置为d:\execute（注：修改的path只会影响当前回话，也不会存储到系统配置中去；当前cmd窗口关闭，新设置的path也就不存在了） set path=%path%;d:\execute // 在path变量中添加d:\execute（注：修改的path只会影响当前回话，也不会存储到系统配置中去；当前cmd窗口关闭，新设置的path也就不存在了） path 显示当前path变量的值 path ; // 清除所有搜索路径设置并指示cmd.exe只在当前目录中搜索 path d:\xxx;%PATH% // 将d:\xxx路径添加到path中 -————————————————– set p=aa1bb1aa2bb2 // 设置变量p，并赋值为aa1bb1aa2bb2 echo %p% // 显示变量p代表的字符串，即aa1bb1aa2bb2 echo %p:~6% // 显示变量p中第6个字符以后的所有字符，即aa2bb2 echo %p:~6,3% // 显示第6个字符以后的3个字符，即aa2 echo %p:~0,3% // 显示前3个字符，即aa1 echo %p:~-2% // 显示最后面的2个字符，即b2 echo %p:~0,-2% // 显示除了最后2个字符以外的其它字符，即aa1bb1aa2b echo %p:aa=c% // 用c替换变量p中所有的aa，即显示c1bb1c2bb2 echo %p:aa=% // 将变量p中的所有aa字符串置换为空，即显示1bb12bb2 echo %p:*bb=c% // 第一个bb及其之前的所有字符被替换为c，即显示c1aa2bb2 set p=%p:*bb=c% // 设置变量p，赋值为 %p:*bb=c% ，即c1aa2bb2 set /a p=39 // 设置p为数值型变量，值为39 set /a p=39/10 // 支持运算符，有小数时用去尾法，39/10=3.9，去尾得3，p=3 set /a p=p/10 // 用 /a 参数时，在 = 后面的变量可以不加%直接引用 set /a p=”1&amp;0” // &amp;运算要加引号。其它支持的运算符参见set/? -————————————————– cls 清除屏幕 ver 显示当前windows系统的版本号 winver 弹框显示当前windows系统信息 vol 显示当前分区的卷标 label 显示当前分区的卷标，同时提示输入新卷标 label c:system 设置c盘的卷标为system time 显示或设置当前时间 例：time /t // 显示当前时间 例：time // 设置新的当前时间（格式：hh:mm:ss），直接回车则表示放弃设置 date 显示或设置当前日期 例：date /t // 显示当前日期 例：date // 设置新的当前日期（格式：YYYY/MM/DD），直接回车则表示放弃设置 title 正在做命令行测试 // 修改当前cmd窗口的标题栏文字为正在做命令行测试 prompt orz: // 将命令提示符修改为orz: print 1.txt // 使用设置好的打印机来打印1.txt文本文件 call ff.bat // 调用执行ff.bat脚本（ff.bat脚本执行完原脚本才会往下执行） start 运行某程序或命令 例：start /max notepad.exe // 最大化的方式启动记事本 例：start /min calc.exe // 最小化的方式启动计算器 例：start /min “” d:\Proxifier.exe // 最小化的方式启动Proxifier代理工具 例：start tasklist // 启动一个cmd实例窗口，并运行tasklist 例：start explorer f:\ // 调用资源管理器打开f盘 例：strat iexplore “www.qq.com&quot; // 启动ie并打开www.qq.com网址 例：start ff.bat // 启动开始执行ff.bat（启动ff.bat脚本后，原脚本继续执行，不会等ff.bat脚本执行完） exit 退出当前cmd窗口实例 例：exit 0 // 退出当前cmd窗口实例，并将过程退出代码设置为0（0表示成功，非0表示失败） 例：exit /B 1 // 退出当前bat脚本，并将ERRORLEVEL系统变量设置为1 pause 暂停批处理程序，并显示出：请按任意键继续…. color 设置当前cmd窗口背景色和前景色（前景色即为字体的颜色） 例：color // 恢复到缺省设置 例：color 02 // 将背景色设为黑色，将字体设为绿色 -————————————- 0 = 黑色 8 = 灰色 1 = 蓝色 9 = 淡蓝色 2 = 绿色 A = 淡绿色 3 = 浅绿色 B = 淡浅绿色 4 = 红色 C = 淡红色 5 = 紫色 D = 淡紫色 6 = 黄色 E = 淡黄色 7 = 白色 F = 亮白色-————————————- mode con cols=200 lines=60 &amp; color 9f 设置DOS窗口颜色为9f，大小：200行 60列（若屏幕缓冲区大小的宽度w&lt;200或高度h&lt;60,最终DOS的窗口就会为w行，h列） chcp 查看命令行环境字符编码（为一个全局设置） 936 – GBK(一般情况下为默认编码)437 – 美国英语65001 – utf-81200 – utf-161201 – utf-16(Big-Endian)12000 – utf-3212001 – utf-32(Big-Endian) 注：cmd的属性窗口，选项标签页也可以查看当前代码页 chcp 936 // 设置当前命令行环境编码为GBK 执行完该命令后还需要将字体设置为点阵字体，才能真正将编码环境切成utf8 chcp 65001 // 设置当前命令行环境编码为utf8 执行完该命令后还需要将字体设置为Lucida Console，才能真正将编码环境切成utf8 在注册表中会写入这些字段信息： systeminfo 查看当前计算机的综合信息 systeminfo | findstr /i “初始安装日期 系统启动时间” 只查看当前计算机的初始安装日期和系统启动时间 wmic 查看硬件的信息 – C:\Windows\System32\wbem\WMIC.exe 例：wmic logicaldisk // 查看计算机上各个盘的相关信息 例：wmic LogicalDisk where “Caption=’C:’” get FreeSpace,Size /value // 获取C盘的剩余空间大小与总大小（单位：Byte） 例：wmic os get Caption,InstallDate,OSArchitecture /value // 获取当前os的Caption、安装日期以及系统架构信息 wmic 查看进程信息 例：wmic process where Caption=”buyticket.exe” get commandline,ExecutablePath,ProcessId,ThreadCount /value // 查看名为”buyticket.exe”所有进程命令行，exe全路径，PID及线程数 例：wmic process where Caption=”buyticket.exe” get ExecutablePath,HandleCount /value // 查看名为”buyticket.exe”所有进程的exe全路径及当前打开的句柄数 例：wmic process where Caption=”buyticket.exe” get ExecutablePath,VirtualSize,WorkingSetSize /value // 查看名为”buyticket.exe”所有进程的exe全路径、当前虚拟地址空间占用及物理内存工作集 logoff 注销当前用户 shutdown 关闭、重启、注销、休眠计算机 例：shutdown /s // 关闭计算机 例：shutdown /s /t 3600 // 一小时后，关闭本地计算机 例：shutdown /a // 终止系统关闭 例：shutdown /r // 关闭并重启本地计算机 例：shutdown /m 192.168.1.166 /r // 关闭并重启ip为192.168.1.166的计算机 +++++++++++++++++++++ 远程关机权限的获取：1）修改远程pc的“本地安全策略”，为指定的用户开放权限在WindowsXP默认的安全策略中，只有Administrators组的用户才有权从远端关闭计算机，如果要给xxxx用户远程关机的权限。可利用WindowsXP的“组策略”或“管理工具”中的“本地安全策略”来实现。1.命令行运行gpedit.msc打开“组策略编辑器“；2.导航到“计算机配置/Windows设置/安全设置/本地策略/用户权利指派”；3.修改“从远端系统强制关机”，添加xxxx用户即可。 2）获得远程IPC管理权限如果配置第一步后还出现“拒绝访问。”，则需要在运行shutdown命令前先运行如下命令net use \[ip地址或计算机名]\ipc$ password /user:xxxx其中password为帐号xxxx的登录密码。 +++++++++++++++++++++ 例：shutdown /g // 关闭并重启计算机，重启后重新启动所有注册的应用程序 例：shutdown /l // 注销本地计算机 例：shutdown /h /f // 休眠本地计算机（强制正在运行的应用程序关闭，不前台警告用户） 例：shutdown /s // 关闭计算机 regsvr32 注册或反注册com组件 例：regsvr32 /s clock.ocx // 以无声的方式注册clock.ocx组件 例：regsvr32 /u myCommon.dll // 卸载myCommon.dll组件 format 格式化磁盘 例：format J: /FS:ntfs // 以ntfs类型格式化J盘 【类型有:FAT、FAT32、exFAT、NTFS或UDF】 例：format J: /FS:fat32 /Q // 以fat32类型快速格式化J盘 chkdsk /f D: // 检查磁盘D并显示状态报告；加参数/f表示同时会修复磁盘上的错误 subst 磁盘映射 – 磁盘映射信息都保存在注册表以下键值中：HKEY_CURRENT_USER\Network 例：subst // 显示目前所有的映射 例：subst z: \com\software // 将\com\software共享映射为本地z盘 例：subst y: e:\src // 将e:\src映射为本地y盘 例：subst z: /d // 删除z盘映射 cmdkey 凭据（保存的用户名和密码） 例：cmdkey /list // 列出可用的凭据 例：cmdkey /list:10.12.190.82 // 列出指定目标的凭据 例：cmdkey /list:Domain:target=10.12.190.82 // 列出指定目标的凭据 例：cmdkey /add:Domain:target=10.12.190.82 /user:LiLei /pass:123456 // 若target为10.12.190.82的凭据不存在，则添加；否则就将10.12.190.82凭据的用户名修改为LiLei，密码修改为123456 例：cmdkey /delete:Domain:target=10.12.190.82 // 删除指定目标的凭据 cscript 执行vbs脚本 例：cscript /Nologo mac.vbs // 执行mac.vbs脚本，显示本机mac地址 ——-mac.vbs———- Dim mc,moSet mc=GetObject(“Winmgmts:”).InstancesOf(“Win32_NetworkAdapterConfiguration”)For Each mo In mcIf mo.IPEnabled=True ThenMsgBox “本机网卡MAC地址是: “ &amp; mo.MacAddressExit ForEnd IfNext -————————- schtasks 任务计划 例：schtasks /query /fo LIST /v // 以较为详细易于阅读的格式显示本机所有任务计划信息 例：schtasks /create /sc minute /mo 20 /tn “Soda Build” /tr d:\check.vbs // 创建一个名为Soda Build的任务计划：该任务计划每20分钟执行一下d:\check.vbs脚本 例：schtasks /create /tn “Soda Build” /tr D:\updateall.bat /sc daily /st 02:06 /f // 强制创建一个名为Soda Build的任务计划（不进行确认）：该任务计划每天凌晨2点06分执行一下D:\updateall.bat脚本 例：schtasks /delete /tn “Soda Build” /f // 强制删除Soda Build名称的任务计划（不进行确认） 例：schtasks /change /tn “Soda Build” /tr d:\check2.vbs // 将名为Soda Build的任务计划的执行脚本修改为d:\check2.vbs 例：schtasks /run /tn “Soda Build” // 执行名为Soda Build的任务计划 例：schtasks /end /tn “Soda Build” // 终止执行名为Soda Build的任务计划 6. net命令net start // 查看已经启动的服务 net start “Task Scheduler” // 开启任务计划服务 net stop “Task Scheduler” // 关闭任务计划服务 net start dnscache // 开启dns缓存服务 net stop dnscache // 关闭dns缓存服务 net share // 查看当前用户下的共享目录 net share workFile /delete // 取消名为workFile的共享状态 net share xxx=c:\360Downloads // 将c:\360Downloads设为共享，并取名为xxx net share ipc$ // 开启ipc$共享 net share ipc$ /del // 删除ipc$共享 net share c$ /del // 删除c盘共享 net use \192.168.1.166\ipc$ “ “ /user:” “ // 建立192.168.1.166的ipc空链接 net use \192.168.1.166\ipc$ “123456” /user:”administrator” // 直接登陆后建立192.168.1.166的ipc非空链接（用户名为administrator 密码为123456） net use h: \192.168.1.166\c$ “123456” /user:”administrator” // 直接登陆后映射192.168.1.166的c盘到本地为h盘（用户名为administrator 密码为123456） net use h: \192.168.1.166\c$ // 登陆后映射192.168.1.166的c盘到本地为h盘 net use \192.168.1.166\ipc$ /del // 删除ipc链接 net use h: /del // 删除本地的h盘的映射 net view // 查看本地局域网内开启了哪些共享 net view \192.168.1.166 // 查看192.168.1.166的机器上在局域网内开启了哪些共享 net time \127.0.0.1 // 查看本地机器的日期及时间 net time \localhost // 查看本地机器的日期及时间 net time \192.168.1.166 // 查看192.168.1.166机器的日期及时间 net time \192.168.1.166 /set // 设置本地计算机时间与192.168.1.166主机的时间同步，加上参数/yes可取消确认信息 net user // 查看当前机器上的用户 net user Administrator // 查看当前机器上的Administrator用户的信息 net user Guest /active:yes // 启用Guest用户 net user dev 123456 /add // 新建一个名为dev，密码为123456的用户 net localgroup administrators dev /add // 把名为dev的用户添加到管理员用户组中，使其具有管理员权限 net user dev /del // 删除名为dev的用户 7. 进程操作tasklist // 显示当前运行的进程信息（可查看PID） taskkill 结束指定的进程 例：taskkill /im notepad.exe // 结束名为notepad.exe的进程 例：taskkill /pid 1230 /pid 1241 /pid 1253 /t // 结束pid为1230、1241和1253的进程以及由它们启动起来的子进程 例：taskkill /f /im cmd.exe /t // 强制结束有名为cmd.exe的进程以及由它启动起来的子进程 8. 网络操作ping // 用于检测网络是否通畅，以及网络时延情况（工作在ICMP协议上） 例：ping baidu.com // 测试与baidu服务器的连接情况 例：ping chen-pc0 // 测试机器名为chen-pc0的连接情况 例：ping 220.181.111.86 // 测试与ip为220.181.111.86的连接情况 例：ping -l 65500 -n 10 qq.com // 向qq.com发送10次65500字节的ping 例：ping -n 6 127.0.0.1 // 对当前主机执行6次ping操作（花费时间为5s） 例：ping -t baidu.com // 不断地测试baidu服务器的连接情况 【Ctrl+Pause Break：查看ping的统计信息；Ctrl+C：终止当前任务】 a. 首先查本地arp cache信息，看是否有对方的mac地址和IP地址映射条目记录b. 如果没有，则发起一个arp请求广播包，等待对方告知具体的mac地址c. 收到arp响应包之后，获得某个IP对应的具体mac地址，有了物理地址之后才可以开始通信了,同时对ip-mac地址做一个本地cached. 发出icmp echo request包，收到icmp echo reply包 ipconfig /all // 查看本地ip地址等详细信息 ipconfig /displaydns // 显示本地dns缓存的内容 ipconfig /flushdns // 清除本地dns缓存的内容 nslookup www.cnblogs.com // 获取www.cnblogs.com的域名解析 服务器: gm-captiva.tencent.com//DNS服务器的主机名Address: 10.6.18.41//DNS服务器IP 非权威应答:名称: www.cnblogs.com//解析的域名URLAddress: 42.121.252.58//解析回的IP nslookup -d www.cnblogs.com // 打印出www.cnblogs.com的域名解析所有记录 netstat -a // 查看开启了哪些端口 netstat -n // 查看端口的网络连接情况 netstat -v // 查看正在进行的工作 netstat -p tcp // 查看tcp协议的使用情况 tracert 182.140.167.44 // 查看本机到达182.140.167.44的路由路径 route print // 显示出IP路由 telnet 182.140.167.44 8000 // 探测182.140.167.44是否使用TCP协议监听8000端口（注意：telnet命令不支持UDP端口检测） 说明：如果端口关闭或者无法连接，则显示不能打开到主机的链接，链接失败；端口打开的情况下，链接成功，则进入telnet页面（全黑的），证明端口可用。 用于探测指定IP的端口号，只是telnet的一个基本功能； 远程登录到网络中的计算机，并以命令行的方式远程管理计算机才是telnet命令的强大之处。 windows telnet服务器(默认端口：23)环境配置过程如下： 参考1 a. 安装telnet服务器 b. 启动Telnet服务 c. 关闭windows防火墙 注：若不想关闭防火墙，则需要在Windows防火墙 – 高级设置里面对Telnet服务器的访问规则进行配置 ftp 46.19.34.198 21 // 连接46.19.34.198 ftp服务器（21为端口号），然后会要求输入用户名与密码；连接成功后，具体如何使用可以键入?来查看帮助说明 arp 显示和修改地址解析协议(ARP)使用的“IP到mac”的地址转换表 例：arp -a // 显示arp缓存表 at 计划任务（必须保证“Task Scheduler”服务启动 net start “task scheduler”） 例：at // 查看所有的计划任务 例：at /delete /yes // 停止所有任务计划（不需要确认） 例：at 1 // 开启id为1的计划任务 例：at 1 /delete /yes // 停止id为1的计划任务（不需要确认） 例：at 12:42 shutdown –s –t30 // 到12:42 ，电脑会出现“ 系统关机 ”对话框，并默认 30 秒延时自动关机 例：at cmd /c dir &gt; c:\test.out // 如果命令不是exe文件，必须在命令前加上cmd /c 例：at 6:00AM /every:Saturday task.bat // 在每周六早上6点，电脑定时启动task.bat批处理文件 例：at \chen 12:00 shutdown /r // 到12:00时，关闭名为chen的计算机 例：at \192.168.1.166 12:00 shutdown /r // 到12:00时，关闭ip为192.168.1.166的计算机 9. 文本处理edit config.ini // 编辑config.ini文件（会进入edit字符编辑器；按alt，可以选择对应的菜单） win7 x64下没有该命令 find 文件中搜索字符串 例：find /N /I “pid” 1.txt // 在1.txt文件中忽略大小写查找pid字符串，并带行号显示查找后的结果 例：find /C “exe” 1.txt // 只显示在1.txt文件中查找到exe字符串的次数 例：find /V “exe” 1.txt // 显示未包含1.txt文件中未包含exe字符串的行 findstr 文件中搜索字符串 例：findstr “hello world” 1.txt // 在1.txt文件中搜索hello或world 例：findstr /c:”hello world” 1.txt // 在1.txt文件中搜索hello world 例：findstr /c:”hello world” 1.txt nul // 在1.txt文件中搜索hello world，并在每行结果前打印出1.txt: 注：findstr只有在2个及以上文件中搜索字符串时才会打印出每个文件的文件名，nul表示一个空文件 例：findstr /s /i “Hello” . // 不区分大小写，在当前目录和所有子目录中的所有文件中的hello 例：findstr “^[0-9][a-z]” 1.txt // 在1.txt中搜索以1个数字+1个小写字母开头子串的行 本文转载自博客园： 博主：可可西 原文链接：http://www.cnblogs.com/kekec/p/3662125.html]]></content>
      <categories>
        <category>学习</category>
      </categories>
      <tags>
        <tag>cmd</tag>
        <tag>转载</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[《爱的艺术》思维导图]]></title>
    <url>%2Fpost%2F1822a02.html</url>
    <content type="text"><![CDATA[引言 爱不是一种只需投入身心就可获得的感情，如果不努力发展自己的全部人格并以此达到一种创造倾向性，那么每种爱的试图都会失败；如果没有爱他人的能力，如果不能真正勇敢地、真诚地、有纪律地爱他人，那么人们在自己的爱情生活中也永远得不到满足。不信，每个人都可以问问自己，你确实见过多少真正有能力爱的人呢？ 我的看法 我当初打算看这本书的原因可以说就是被这本书的书名吸引了————“爱的艺术”。为什么爱可以被称为一种艺术？爱不是一种人与生俱来的天性吗？当爱成为一种艺术，那会是什么样？ 当我看完这本书，我最大的感受就是————爱，是一门一生的艺术。只有先明白爱的艺术，才能真正拥抱爱。 思维导图 百度网盘点击下载密码：ibuz 本书简介 这本书必定会使所有期望从这本书得到掌握爱的艺术秘诀的读者大失所望。恰恰相反，这本书要告诉读者，爱情不是一种与人的成熟程度无关 ，只需要投入身心的感情。这本书要说服读者：如果不努力发展自己的全部人格并以此达到一种创造倾向性，那么每种爱的试图都会失败；如果没有爱他人的能力，如果不能真正谦恭地、勇敢地、真诚地和有纪律地爱他人，那么人们在自己的爱情生活中也永远得不到满足。每个人都可以问问自己，你确实见过多少真正有能力爱的人呢？ 作者简介Fromm，Erich（1900～1980）德国精神病学家，新精神分析学家,是精神分析学派的代表人物之一。1922年获海德堡大学哲学博士学位。次年入慕尼黑大学研究精神分析，并在柏林精神分析学院接受训练。1929年在法兰克福精神分析学院和法兰克福大学任教。1934年移居美国。先后任教于哥伦比亚大学、耶鲁大学、密歇根州立大学。弗罗姆十分重视人与社会的关系的研究。他承认人的生物性，但更强调人的社会性，认为人的本质是由文化的或社会的因素而不是生物的因素决定的。人在现代社会中普遍具有孤独感，这是人在社会中达到个性化的必然结果。为了医治病态社会，他提出通过改善人的心理，解决有关人们的劳动组织与社会的相互关系的问题，建立一个友爱、互助、没有孤独感的理想社会。著有《逃避自由》、《精神分析与宗教》、《论健全的社会》、《人类破坏性的分析》等。 艾·弗罗姆把心理学视为是人性之自我理解这一久远努力的延续。当运用人类学与社会学的洞见以拓展来自临床、心理分析和精神病学研究的知识之时，弗罗姆充分地汲取思想史的养料，并提醒他的读者：以往的伦理思索者乃是哲学家以及心理学家。弗罗姆在基本观点上是一个弗洛伊德主义者，且显示出弗洛伊德见解的广度与深度。他同时强调了弗洛伊德思想的开放性实质，因而避免了教条主义，并且能面对他最初的思想源泉仍然保持极有意义的游刃有余。 尽管弗罗姆著有许多著作，但《逃避自由》是他最著名的一本。在此书中他论证，正如不能离开对文化内容的解释去理解个人一样，要理解社会过程同样不能不懂得作用于个人的心理过程。“前个人主义社会”给个人以安全，但严重地限制了个人的自由发展。自中世纪的封建秩序解体之后，人已摆脱了传统的束缚，但他并没有在他个人自我实现的积极意义上获得自由。个人主义的历史发展已提供幸福的许多可能，但今天的个人必须有内在勇气去激发他全部的潜能，否则他就会寻求在限制自我的新的依赖形式中逃避他的自由。外界限制的根除不足以使人有积极的自由：“来”（from）自于什么的自由可能是个前提，但“去”（to）创造争取的自由对于人的成长是基本的。法西斯政权的兴起以援引在民主手段、经济秩序或政治欺诈中的经验不足来解释是不能令人满意的，它置根于普及于人民大众的许多内在观点之中。 弗洛姆创立以关于人的处境的学说为基础的人本主义精神分析，注重分析一定的经济结构对人的影响，提出社会性格及社会潜意识论，认为这些是联系经济基础与意识形态的中介环节，并强调社会心理在社会进程中的作用。他试图据此解释现代西方人的困境及精神危机，就此提出社会改革论。 书籍下载百度网盘点击下载密码：562r]]></content>
      <categories>
        <category>思维导图</category>
      </categories>
      <tags>
        <tag>思维导图</tag>
        <tag>读书</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hello World!]]></title>
    <url>%2Fpost%2F1c291ca3.html</url>
    <content type="text"><![CDATA[这里是crazyjackong的个人博客，开启于2018年3月17日。欢迎各位客官！！]]></content>
      <categories>
        <category>搭建博客</category>
      </categories>
      <tags>
        <tag>实验</tag>
      </tags>
  </entry>
</search>
